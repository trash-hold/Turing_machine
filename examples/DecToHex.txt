0 1 2 3 4 5 6 7 8 9 A B C D E F !
2137
//Start by checking wheter input is a dec number 

qinit, 0, qinit, 0, >
qinit, 1, qinit, 1, >
qinit, 2, qinit, 2, >
qinit, 3, qinit, 3, >
qinit, 4, qinit, 4, >
qinit, 5, qinit, 5, >
qinit, 6, qinit, 6, >
qinit, 7, qinit, 7, >
qinit, 8, qinit, 8, >
qinit, 9, qinit, 9, >
//Start of dec -> bin translation
//Assuming number is even
qinit, #, halve, 0, <

halve, 0, halve, 0, <
halve, 2, halve, 1, <
halve, 4, halve, 2, <
halve, 6, halve, 3, <
halve, 8, halve, 4, <

//For odd numbers we add 0.5 to the right 

halve, 1, oddHalve, 0, >
halve, 3, oddHalve, 1, >
halve, 5, oddHalve, 2, >
halve, 7, oddHalve, 3, >
halve, 9, oddHalve, 4, >
halve, #, removeZero, #, >
oddHalve, 0, move, 5, <
oddHalve, 1, move, 6, <
oddHalve, 2, move, 7, <
oddHalve, 3, move, 8, <
oddHalve, 4, move, 9, <
move, 0, halve, 0, <
move, 1, halve, 1, <
move, 2, halve, 2, <
move, 3, halve, 3, <
move, 4, halve, 4, <
removeZero, 0, back, #, >
removeZero, 1, back, 1, >
removeZero, 2, back, 2, >
removeZero, 3, back, 3, >
removeZero, 4, back, 4, >
removeZero, 5, back, 5, >
removeZero, 6, back, 6, >
removeZero, 7, back, 7, >
removeZero, 8, back, 8, >
removeZero, 9, back, 9, >
back, 0, back, 0, >
back, 1, back, 1, >
back, 2, back, 2, >
back, 3, back, 3, >
back, 4, back, 4, >
back, 5, back, 5, >
back, 6, back, 6, >
back, 7, back, 7, >
back, 8, back, 8, >
back, 9, back, 9, >

//Start of getting one bit of number
back, #, res, #, <
res, 0, res0, #, >
res0, #, passRes0, #, >
passRes0, 0, passRes0, 0, >
passRes0, 1, passRes0, 1, >
passRes0, #, pass, 0, <
res, 5, res1, #, >
res1, #, passRes1, #, >
passRes1, 0, passRes1, 0, >
passRes1, 1, passRes1, 1, >
passRes1, #, pass, 1, <
pass, 0, pass, 0, <
pass, 1, pass, 1, <

//Start of getting another bit 
pass, #, passEnd, #, <
passEnd, #, halve, 0, <

//Start of bin -> hex translation
res, #, binStart, #, >

//Filling up bytes

binStart, #, binStart, #, >
binStart, 1, binCount2, 1, >
binStart, 0, binCount2, 0, >
binCount1, 0, binCount2, 0, >
binCount1, 1, binCount2, 1, >
binCount2, 0, binCount3, 0, >
binCount2, 1, binCount3, 1, >
binCount2, #, binCount3, 0, >
binCount3, 0, binCount4, 0, >
binCount3, 1, binCount4, 1, >
binCount3, #, binCount4, 0, >
binCount4, 0, binCount1, 0, >
binCount4, 1, binCount1, 1, >
binCount4, #, binCount1, 0, >

//Finding first bit of number
binCount1, #, goBack, #, <
goBack, 0, goBack, 0, <
goBack, 1, goBack, 1, <

//Initialising binaryDecisionTree

goBack, #, binHexInit, !, >
binHexInit, 0, D0, #, >
binHexInit, 1, D1, #, >
binHexInit, #, fin, #, <
D1, 1, D11, #, >
D1, 0, D10, #, >
D0, 1, D01, #, >
D0, 0, D00, #, >
D11, 1, D111, #, >
D11, 0, D110, #, >
D01, 1, D011, #, >
D01, 0, D010, #, >
D00, 1, D001, #, >
D00, 0, D000, #, >
D10, 1, D101, #, >
D10, 0, D100, #, >
D111, 1, hexResF, !, <
D111, 0, hexRes7, !, <
D110, 1, hexResB, !, <
D110, 0, hexRes3, !, <
D101, 1, hexResD, !, <
D101, 0, hexRes5, !, <
D100, 1, hexRes9, !, <
D100, 0, hexRes1, !, <
D011, 1, hexResE, !, <
D011, 0, hexRes6, !, <
D010, 1, hexResA, !, <
D010, 0, hexRes2, !, <
D001, 1, hexResC, !, <
D001, 0, hexRes4, !, <
D000, 1, hexRes8, !, <
D000, 0, hexRes0, !, <

//Start of writting of result
hexRes0, #, hexRes0, #, <
hexRes0, !, newBeg, 0, <
hexRes1, #, hexRes1, #, <
hexRes1, !, newBeg, 1, <
hexRes2, #, hexRes2, #, <
hexRes2, !, newBeg, 2, <
hexRes3, #, hexRes3, #, <
hexRes3, !, newBeg, 3, <
hexRes4, #, hexRes4, #, <
hexRes4, !, newBeg, 4, <
hexRes5, #, hexRes5, #, <
hexRes5, !, newBeg, 5, <
hexRes6, #, hexRes6, #, <
hexRes6, !, newBeg, 6, <
hexRes7, #, hexRes7, #, <
hexRes7, !, newBeg, 7, <
hexRes8, #, hexRes8, #, <
hexRes8, !, newBeg, 8, <
hexRes9, #, hexRes9, #, <
hexRes9, !, newBeg, 9, <
hexResA, #, hexResA, #, <
hexResA, !, newBeg, A, <
hexResB, #, hexResB, #, <
hexResB, !, newBeg, B, <
hexResC, #, hexResC, #, <
hexResC, !, newBeg, C, <
hexResD, #, hexResD, #, <
hexResD, !, newBeg, D, <
hexResE, #, hexResE, #, <
hexResE, !, newBeg, E, <
hexResF, #, hexResF, #, <
hexResF, !, newBeg, F, <
newBeg, #, findBin, !, >

//Looking for binary bytes start
findBin, 0, findBin, 0, >
findBin, 1, findBin, 1, >
findBin, 2, findBin, 2, >
findBin, 3, findBin, 3, >
findBin, 4, findBin, 4, >
findBin, 5, findBin, 5, >
findBin, 6, findBin, 6, >
findBin, 7, findBin, 7, >
findBin, 8, findBin, 8, >
findBin, 9, findBin, 9, >
findBin, A, findBin, A, >
findBin, B, findBin, B, >
findBin, C, findBin, C, >
findBin, D, findBin, D, >
findBin, E, findBin, E, >
findBin, F, findBin, F, >
findBin, #, findBin, #, >

//Repeating bin -> hex translation for another byte
findBin, !, binHexInit, #, >

//Rest of passing states for finding ! to write down result 
hexRes0, 0, hexRes0, 0, <
hexRes0, 1, hexRes0, 1, <
hexRes0, 2, hexRes0, 2, <
hexRes0, 3, hexRes0, 3, <
hexRes0, 4, hexRes0, 4, <
hexRes0, 5, hexRes0, 5, <
hexRes0, 6, hexRes0, 6, <
hexRes0, 7, hexRes0, 7, <
hexRes0, 8, hexRes0, 8, <
hexRes0, 9, hexRes0, 9, <
hexRes0, A, hexRes0, A, <
hexRes0, B, hexRes0, B, <
hexRes0, C, hexRes0, C, <
hexRes0, D, hexRes0, D, <
hexRes0, E, hexRes0, E, <
hexRes0, F, hexRes0, F, <
hexRes1, 0, hexRes1, 0, <
hexRes1, 1, hexRes1, 1, <
hexRes1, 2, hexRes1, 2, <
hexRes1, 3, hexRes1, 3, <
hexRes1, 4, hexRes1, 4, <
hexRes1, 5, hexRes1, 5, <
hexRes1, 6, hexRes1, 6, <
hexRes1, 7, hexRes1, 7, <
hexRes1, 8, hexRes1, 8, <
hexRes1, 9, hexRes1, 9, <
hexRes1, A, hexRes1, A, <
hexRes1, B, hexRes1, B, <
hexRes1, C, hexRes1, C, <
hexRes1, D, hexRes1, D, <
hexRes1, E, hexRes1, E, <
hexRes1, F, hexRes1, F, <
hexRes2, 0, hexRes2, 0, <
hexRes2, 1, hexRes2, 1, <
hexRes2, 2, hexRes2, 2, <
hexRes2, 3, hexRes2, 3, <
hexRes2, 4, hexRes2, 4, <
hexRes2, 5, hexRes2, 5, <
hexRes2, 6, hexRes2, 6, <
hexRes2, 7, hexRes2, 7, <
hexRes2, 8, hexRes2, 8, <
hexRes2, 9, hexRes2, 9, <
hexRes2, A, hexRes2, A, <
hexRes2, B, hexRes2, B, <
hexRes2, C, hexRes2, C, <
hexRes2, D, hexRes2, D, <
hexRes2, E, hexRes2, E, <
hexRes2, F, hexRes2, F, <
hexRes3, 0, hexRes3, 0, <
hexRes3, 1, hexRes3, 1, <
hexRes3, 2, hexRes3, 2, <
hexRes3, 3, hexRes3, 3, <
hexRes3, 4, hexRes3, 4, <
hexRes3, 5, hexRes3, 5, <
hexRes3, 6, hexRes3, 6, <
hexRes3, 7, hexRes3, 7, <
hexRes3, 8, hexRes3, 8, <
hexRes3, 9, hexRes3, 9, <
hexRes3, A, hexRes3, A, <
hexRes3, B, hexRes3, B, <
hexRes3, C, hexRes3, C, <
hexRes3, D, hexRes3, D, <
hexRes3, E, hexRes3, E, <
hexRes3, F, hexRes3, F, <
hexRes4, 0, hexRes4, 0, <
hexRes4, 1, hexRes4, 1, <
hexRes4, 2, hexRes4, 2, <
hexRes4, 3, hexRes4, 3, <
hexRes4, 4, hexRes4, 4, <
hexRes4, 5, hexRes4, 5, <
hexRes4, 6, hexRes4, 6, <
hexRes4, 7, hexRes4, 7, <
hexRes4, 8, hexRes4, 8, <
hexRes4, 9, hexRes4, 9, <
hexRes4, A, hexRes4, A, <
hexRes4, B, hexRes4, B, <
hexRes4, C, hexRes4, C, <
hexRes4, D, hexRes4, D, <
hexRes4, E, hexRes4, E, <
hexRes4, F, hexRes4, F, <
hexRes5, 0, hexRes5, 0, <
hexRes5, 1, hexRes5, 1, <
hexRes5, 2, hexRes5, 2, <
hexRes5, 3, hexRes5, 3, <
hexRes5, 4, hexRes5, 4, <
hexRes5, 5, hexRes5, 5, <
hexRes5, 6, hexRes5, 6, <
hexRes5, 7, hexRes5, 7, <
hexRes5, 8, hexRes5, 8, <
hexRes5, 9, hexRes5, 9, <
hexRes5, A, hexRes5, A, <
hexRes5, B, hexRes5, B, <
hexRes5, C, hexRes5, C, <
hexRes5, D, hexRes5, D, <
hexRes5, E, hexRes5, E, <
hexRes5, F, hexRes5, F, <
hexRes6, 0, hexRes6, 0, <
hexRes6, 1, hexRes6, 1, <
hexRes6, 2, hexRes6, 2, <
hexRes6, 3, hexRes6, 3, <
hexRes6, 4, hexRes6, 4, <
hexRes6, 5, hexRes6, 5, <
hexRes6, 6, hexRes6, 6, <
hexRes6, 7, hexRes6, 7, <
hexRes6, 8, hexRes6, 8, <
hexRes6, 9, hexRes6, 9, <
hexRes6, A, hexRes6, A, <
hexRes6, B, hexRes6, B, <
hexRes6, C, hexRes6, C, <
hexRes6, D, hexRes6, D, <
hexRes6, E, hexRes6, E, <
hexRes6, F, hexRes6, F, <
hexRes7, 0, hexRes7, 0, <
hexRes7, 1, hexRes7, 1, <
hexRes7, 2, hexRes7, 2, <
hexRes7, 3, hexRes7, 3, <
hexRes7, 4, hexRes7, 4, <
hexRes7, 5, hexRes7, 5, <
hexRes7, 6, hexRes7, 6, <
hexRes7, 7, hexRes7, 7, <
hexRes7, 8, hexRes7, 8, <
hexRes7, 9, hexRes7, 9, <
hexRes7, A, hexRes7, A, <
hexRes7, B, hexRes7, B, <
hexRes7, C, hexRes7, C, <
hexRes7, D, hexRes7, D, <
hexRes7, E, hexRes7, E, <
hexRes7, F, hexRes7, F, <
hexRes8, 0, hexRes8, 0, <
hexRes8, 1, hexRes8, 1, <
hexRes8, 2, hexRes8, 2, <
hexRes8, 3, hexRes8, 3, <
hexRes8, 4, hexRes8, 4, <
hexRes8, 5, hexRes8, 5, <
hexRes8, 6, hexRes8, 6, <
hexRes8, 7, hexRes8, 7, <
hexRes8, 8, hexRes8, 8, <
hexRes8, 9, hexRes8, 9, <
hexRes8, A, hexRes8, A, <
hexRes8, B, hexRes8, B, <
hexRes8, C, hexRes8, C, <
hexRes8, D, hexRes8, D, <
hexRes8, E, hexRes8, E, <
hexRes8, F, hexRes8, F, <
hexRes9, 0, hexRes9, 0, <
hexRes9, 1, hexRes9, 1, <
hexRes9, 2, hexRes9, 2, <
hexRes9, 3, hexRes9, 3, <
hexRes9, 4, hexRes9, 4, <
hexRes9, 5, hexRes9, 5, <
hexRes9, 6, hexRes9, 6, <
hexRes9, 7, hexRes9, 7, <
hexRes9, 8, hexRes9, 8, <
hexRes9, 9, hexRes9, 9, <
hexRes9, A, hexRes9, A, <
hexRes9, B, hexRes9, B, <
hexRes9, C, hexRes9, C, <
hexRes9, D, hexRes9, D, <
hexRes9, E, hexRes9, E, <
hexRes9, F, hexRes9, F, <
hexResA, 0, hexResA, 0, <
hexResA, 1, hexResA, 1, <
hexResA, 2, hexResA, 2, <
hexResA, 3, hexResA, 3, <
hexResA, 4, hexResA, 4, <
hexResA, 5, hexResA, 5, <
hexResA, 6, hexResA, 6, <
hexResA, 7, hexResA, 7, <
hexResA, 8, hexResA, 8, <
hexResA, 9, hexResA, 9, <
hexResA, A, hexResA, A, <
hexResA, B, hexResA, B, <
hexResA, C, hexResA, C, <
hexResA, D, hexResA, D, <
hexResA, E, hexResA, E, <
hexResA, F, hexResA, F, <
hexResB, 0, hexResB, 0, <
hexResB, 1, hexResB, 1, <
hexResB, 2, hexResB, 2, <
hexResB, 3, hexResB, 3, <
hexResB, 4, hexResB, 4, <
hexResB, 5, hexResB, 5, <
hexResB, 6, hexResB, 6, <
hexResB, 7, hexResB, 7, <
hexResB, 8, hexResB, 8, <
hexResB, 9, hexResB, 9, <
hexResB, A, hexResB, A, <
hexResB, B, hexResB, B, <
hexResB, C, hexResB, C, <
hexResB, D, hexResB, D, <
hexResB, E, hexResB, E, <
hexResB, F, hexResB, F, <
hexResC, 0, hexResC, 0, <
hexResC, 1, hexResC, 1, <
hexResC, 2, hexResC, 2, <
hexResC, 3, hexResC, 3, <
hexResC, 4, hexResC, 4, <
hexResC, 5, hexResC, 5, <
hexResC, 6, hexResC, 6, <
hexResC, 7, hexResC, 7, <
hexResC, 8, hexResC, 8, <
hexResC, 9, hexResC, 9, <
hexResC, A, hexResC, A, <
hexResC, B, hexResC, B, <
hexResC, C, hexResC, C, <
hexResC, D, hexResC, D, <
hexResC, E, hexResC, E, <
hexResC, F, hexResC, F, <
hexResD, 0, hexResD, 0, <
hexResD, 1, hexResD, 1, <
hexResD, 2, hexResD, 2, <
hexResD, 3, hexResD, 3, <
hexResD, 4, hexResD, 4, <
hexResD, 5, hexResD, 5, <
hexResD, 6, hexResD, 6, <
hexResD, 7, hexResD, 7, <
hexResD, 8, hexResD, 8, <
hexResD, 9, hexResD, 9, <
hexResD, A, hexResD, A, <
hexResD, B, hexResD, B, <
hexResD, C, hexResD, C, <
hexResD, D, hexResD, D, <
hexResD, E, hexResD, E, <
hexResD, F, hexResD, F, <
hexResE, 0, hexResE, 0, <
hexResE, 1, hexResE, 1, <
hexResE, 2, hexResE, 2, <
hexResE, 3, hexResE, 3, <
hexResE, 4, hexResE, 4, <
hexResE, 5, hexResE, 5, <
hexResE, 6, hexResE, 6, <
hexResE, 7, hexResE, 7, <
hexResE, 8, hexResE, 8, <
hexResE, 9, hexResE, 9, <
hexResE, A, hexResE, A, <
hexResE, B, hexResE, B, <
hexResE, C, hexResE, C, <
hexResE, D, hexResE, D, <
hexResE, E, hexResE, E, <
hexResE, F, hexResE, F, <
hexResF, 0, hexResF, 0, <
hexResF, 1, hexResF, 1, <
hexResF, 2, hexResF, 2, <
hexResF, 3, hexResF, 3, <
hexResF, 4, hexResF, 4, <
hexResF, 5, hexResF, 5, <
hexResF, 6, hexResF, 6, <
hexResF, 7, hexResF, 7, <
hexResF, 8, hexResF, 8, <
hexResF, 9, hexResF, 9, <
hexResF, A, hexResF, A, <
hexResF, B, hexResF, B, <
hexResF, C, hexResF, C, <
hexResF, D, hexResF, D, <
hexResF, E, hexResF, E, <
hexResF, F, hexResF, F, <